apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-mongodb
  labels:
    app: {{ .Release.Name }}-mongodb
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-mongodb
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-mongodb
        release: {{ .Release.Name }}
      {{- if .Values.podAnnotations }}
      annotations:
        {{- toYaml .Values.podAnnotations | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.deployment.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.deployment.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.deployment.affinity }}
      affinity:
        {{- toYaml .Values.deployment.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.deployment.tolerations }}
      tolerations:
        {{- toYaml .Values.deployment.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.security.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.security.podSecurityContext | nindent 8 }}
      {{- end }}
      containers:
      - name: mongodb
        image: "mongo:{{ .Chart.AppVersion }}"
        imagePullPolicy: IfNotPresent
        {{- if .Values.security.containerSecurityContext }}
        securityContext:
          {{- toYaml .Values.security.containerSecurityContext | nindent 10 }}
        {{- end }}
        ports:
        - name: mongodb
          containerPort: 27017
          protocol: TCP
        env:
        {{- if .Values.mongodb.auth.enabled }}
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "root"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mongodb-auth
              key: mongodb-root-password
        - name: MONGO_INITDB_DATABASE
          value: {{ .Values.mongodb.auth.database | quote }}
        {{- end }}
        {{- if .Values.extraEnvVars }}
        {{- toYaml .Values.extraEnvVars | nindent 8 }}
        {{- end }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          exec:
            command:
              - mongosh
              - --eval
              - "db.adminCommand('ping')"
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          exec:
            command:
              - mongosh
              - --eval
              - "db.adminCommand('ping')"
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        {{- end }}
        resources:
          {{- toYaml .Values.deployment.resources | nindent 10 }}
        volumeMounts:
        - name: data
          mountPath: /data/db
        {{- if .Values.security.tls.enabled }}
        - name: certs
          mountPath: /certs
        {{- end }}
      volumes:
      {{- if .Values.deployment.persistence.enabled }}
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-mongodb
      {{- else }}
      - name: data
        emptyDir: {}
      {{- end }}
      {{- if .Values.security.tls.enabled }}
      - name: certs
        secret:
          secretName: {{ .Values.security.tls.secretName }}
      {{- end }}